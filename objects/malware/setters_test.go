// Copyright 2015-2022 Bret Jordan, All rights reserved.
//
// Use of this source code is governed by an Apache 2.0 license that can be
// found in the LICENSE file in the root of the source tree.

package malware

import (
	"testing"
	"time"

	"github.com/freetaxii/libstix2/defs"
)

/*
TestAddMalwareType -
*/
func TestAddMalwareType(t *testing.T) {
	m := New()
	want := "bot"
	m.AddTypes(want)

	if got := m.MalwareTypes[0]; got != want {
		t.Error("Fail Malware Add Malware Type Check")
	}
}

/*
TestAddTypes -
*/
func TestAddTypes(t *testing.T) {
	m := New()
	m2 := New()
	want := "bot, backdoor"
	want2 := []string{" backdoor ", "bot"}
	wantRes := []string{"bot", "backdoor"}
	wantRes2 := []string{"backdoor", "bot"}

	m.AddTypes(want)
	m2.AddTypes(want2)

	if got := len(m.MalwareTypes); got != 2 {
		t.Error("Fail Malware Add Malware Types Check. List contains less items")
	}

	if got := len(m2.MalwareTypes); got != 2 {
		t.Error("Fail Malware Add Malware Types Check. Added less items")
	}

	if got := m.MalwareTypes[0]; got != wantRes[0] {
		t.Error("Fail Malware Add Malware Types Check. First value.")
	}

	if got := m.MalwareTypes[1]; got != wantRes[1] {
		t.Error("Fail Malware Add Malware Types Check. Method does not trim secont value string.")
	}

	if got := m2.MalwareTypes[0]; got != wantRes2[0] {
		t.Error("Fail Malware Add Malware Types Check. First value. Should add array of values")
	}

	if got := m2.MalwareTypes[1]; got != wantRes2[1] {
		t.Error("Fail Malware Add Malware Types Check. Method does not trim secont value string. Should add array of values")
	}
}

/*
TestSetIsFamily -
*/
func TestSetIsFamily(t *testing.T) {
	m := New()
	want := true
	m.SetIsFamily()

	if got := m.IsFamily; got != want {
		t.Error("Fail Malware Set Is Family Check")
	}
}

/*
TestAddAliases -
*/
func TestAddAliases(t *testing.T) {
	m := New()
	m2 := New()
	want := "bot, backdoor"
	want2 := []string{" backdoor ", "bot"}
	wantRes := []string{"bot", "backdoor"}
	wantRes2 := []string{"backdoor", "bot"}

	m.AddAliases(want)
	m2.AddAliases(want2)

	if got := m.Aliases[0]; got != wantRes[0] {
		t.Error("Fail Malware Add Aliases Check. First value.")
	}

	if got := m.Aliases[1]; got != wantRes[1] {
		t.Error("Fail Malware Add Aliases Check. Method does not trim secont value string.")
	}

	if got := m2.Aliases[0]; got != wantRes2[0] {
		t.Error("Fail Malware Add Aliases Check. First value. Should add array of values")
	}

	if got := m2.Aliases[1]; got != wantRes2[1] {
		t.Error("Fail Malware Add Aliases Check. Method does not trim secont value string. Should add array of values")
	}
}

/*
TestAddAlias -
*/
func TestAddAlias(t *testing.T) {
	m := New()
	want := "bot"
	m.AddAliases(want)

	if got := m.Aliases[0]; got != want {
		t.Error("Fail Malware Add Aliases Check")
	}
}

/*
TestAddOsExecutionEnvs -
*/
func TestAddOsExecutionEnvs(t *testing.T) {
	m := New()
	m2 := New()
	want := "bot, backdoor"
	want2 := []string{" backdoor ", "bot"}
	wantRes := []string{"bot", "backdoor"}
	wantRes2 := []string{"backdoor", "bot"}

	m.AddOsExecutionEnvs(want)
	m2.AddOsExecutionEnvs(want2)

	if got := m.OsExecutionEnvs[0]; got != wantRes[0] {
		t.Error("Fail Malware Add Os Execution Envs Check. First value.")
	}

	if got := m.OsExecutionEnvs[1]; got != wantRes[1] {
		t.Error("Fail Malware Add Os Execution Envs Check. Method does not trim secont value string.")
	}

	if got := m2.OsExecutionEnvs[0]; got != wantRes2[0] {
		t.Error("Fail Malware Add Os Execution Envs Check. First value. Should add array of values")
	}

	if got := m2.OsExecutionEnvs[1]; got != wantRes2[1] {
		t.Error("Fail Malware Add Os Execution Envs Check. Method does not trim secont value string. Should add array of values")
	}
}

/*
TestAddOsExecutionEnv -
*/
func TestAddOsExecutionEnv(t *testing.T) {
	m := New()
	want := "bot"
	m.AddOsExecutionEnvs(want)

	if got := m.OsExecutionEnvs[0]; got != want {
		t.Error("Fail Malware Add Os Execution Env Check")
	}
}

/*
TestAddArchitectureExecutionEnvs -
*/
func TestAddArchitectureExecutionEnvs(t *testing.T) {
	m := New()
	m2 := New()
	want := "bot, backdoor"
	want2 := []string{" backdoor ", "bot"}
	wantRes := []string{"bot", "backdoor"}
	wantRes2 := []string{"backdoor", "bot"}

	m.AddArchitectureExecutionEnvs(want)
	m2.AddArchitectureExecutionEnvs(want2)

	if got := m.ArchitectureExecutionEnvs[0]; got != wantRes[0] {
		t.Error("Fail Malware Add Architecture Execution Envs Check. First value.")
	}

	if got := m.ArchitectureExecutionEnvs[1]; got != wantRes[1] {
		t.Error("Fail Malware Add Architecture Execution Envs Check. Method does not trim secont value string.")
	}

	if got := m2.ArchitectureExecutionEnvs[0]; got != wantRes2[0] {
		t.Error("Fail Malware Add Architecture Execution Envs Check. First value. Should add array of values")
	}

	if got := m2.ArchitectureExecutionEnvs[1]; got != wantRes2[1] {
		t.Error("Fail Malware Add Architecture Execution Envs Check. Method does not trim secont value string. Should add array of values")
	}
}

/*
TestAddArchitectureExecutionEnv -
*/
func TestAddArchitectureExecutionEnv(t *testing.T) {
	m := New()
	want := "bot"
	m.AddArchitectureExecutionEnvs(want)

	if got := m.ArchitectureExecutionEnvs[0]; got != want {
		t.Error("Fail Malware Add Architecture Execution Env Check")
	}
}

/*
TestAddArchitectureExecutionEnvs -
*/
func TestAddImplementationLanguages(t *testing.T) {
	m := New()
	m2 := New()
	want := "bot, backdoor"
	want2 := []string{" backdoor ", "bot"}
	wantRes := []string{"bot", "backdoor"}
	wantRes2 := []string{"backdoor", "bot"}

	m.AddImplementationLanguages(want)
	m2.AddImplementationLanguages(want2)

	if got := m.ImplementationLanguages[0]; got != wantRes[0] {
		t.Error("Fail Malware Add Implementation Languages Check. First value.")
	}

	if got := m.ImplementationLanguages[1]; got != wantRes[1] {
		t.Error("Fail Malware Add Implementation Languages Check. Method does not trim secont value string.")
	}

	if got := m2.ImplementationLanguages[0]; got != wantRes2[0] {
		t.Error("Fail Malware Add Implementation Languages Check. First value. Should add array of values")
	}

	if got := m2.ImplementationLanguages[1]; got != wantRes2[1] {
		t.Error("Fail Malware Add Implementation Languages Check. Method does not trim secont value string. Should add array of values")
	}
}

/*
TestArchitectureExecutionEnv -
*/
func TestAddImplementationLanguage(t *testing.T) {
	m := New()
	want := "bot"
	m.AddImplementationLanguages(want)

	if got := m.ImplementationLanguages[0]; got != want {
		t.Error("Fail Malware Add Implementation Language Check")
	}
}

/*
TestAddCapabilities -
*/
func TestAddCapabilities(t *testing.T) {
	m := New()
	m2 := New()
	want := "bot, backdoor"
	want2 := []string{" backdoor ", "bot"}
	wantRes := []string{"bot", "backdoor"}
	wantRes2 := []string{"backdoor", "bot"}

	m.AddCapabilities(want)
	m2.AddCapabilities(want2)

	if got := m.Capabilities[0]; got != wantRes[0] {
		t.Error("Fail Malware Add Capabilities Check. First value.")
	}

	if got := m.Capabilities[1]; got != wantRes[1] {
		t.Error("Fail Malware Add Capabilities Check. Method does not trim secont value string.")
	}

	if got := m2.Capabilities[0]; got != wantRes2[0] {
		t.Error("Fail Malware Add Capabilities Check. First value. Should add array of values")
	}

	if got := m2.Capabilities[1]; got != wantRes2[1] {
		t.Error("Fail Malware Add Capabilities Check. Method does not trim secont value string. Should add array of values")
	}
}

/*
TestAddCapabilities -
*/
func TestAddCapability(t *testing.T) {
	m := New()
	want := "bot"
	m.AddCapabilities(want)

	if got := m.Capabilities[0]; got != want {
		t.Error("Fail Malware Add Capability Check")
	}
}

/*
TestAddSampleRefs -
*/
func TestAddSampleRefs(t *testing.T) {
	m := New()
	m2 := New()
	want := "bot, backdoor"
	want2 := []string{" backdoor ", "bot"}
	wantRes := []string{"bot", "backdoor"}
	wantRes2 := []string{"backdoor", "bot"}

	m.AddSampleRefs(want)
	m2.AddSampleRefs(want2)

	if got := m.SampleRefs[0]; got != wantRes[0] {
		t.Error("Fail Malware Add Sample Refs Check. First value.")
	}

	if got := m.SampleRefs[1]; got != wantRes[1] {
		t.Error("Fail Malware Add Sample Refs Check. Method does not trim secont value string.")
	}

	if got := m2.SampleRefs[0]; got != wantRes2[0] {
		t.Error("Fail Malware Add Sample Refs Check. First value. Should add array of values")
	}

	if got := m2.SampleRefs[1]; got != wantRes2[1] {
		t.Error("Fail Malware Add Sample Refs Check. Method does not trim secont value string. Should add array of values")
	}
}

/*
TestAddSampleRef -
*/
func TestAddSampleRef(t *testing.T) {
	m := New()
	want := "id--bot"
	m.AddSampleRefs(want)

	if got := m.SampleRefs[0]; got != want {
		t.Error("Fail Malware Add Sample Ref Check")
	}
}

/*
TestSetFirstSeen -
*/
func TestSetFirstSeen(t *testing.T) {
	m := New()
	wantStr := "2019-10-04T00:00:00Z"
	want, _ := time.Parse(defs.TimeRFC3339Milli, wantStr)

	m.SetFirstSeen(want)

	if got := m.FirstSeen; got != wantStr {
		t.Error("Fail Malware Set First Seen Check got:" + got + "  want: " + wantStr)
	}
}

/*
TestSetLastSeen -
*/
func TestSetLastSeen(t *testing.T) {
	m := New()
	wantStr := "2019-10-04T00:00:00Z"
	want, _ := time.Parse(defs.TimeRFC3339Milli, wantStr)

	m.SetLastSeen(want)

	if got := m.LastSeen; got != wantStr {
		t.Error("Fail Malware Set Last Seen Check got:" + got + "  want: " + wantStr)
	}
}
